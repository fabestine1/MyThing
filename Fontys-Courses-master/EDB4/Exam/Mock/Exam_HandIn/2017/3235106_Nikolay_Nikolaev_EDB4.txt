/*
Nikolay Anatoliev Nikolaev
3235106
e-s32
*/


--Exercice 1

SET SERVEROUTPUT ON;
DECLARE
	CURSOR l_cursor IS
	SELECT LOCATION_ID, CITY, COUNTRY_ID
	FROM LOCATIONS
	ORDER BY COUNTRY_ID;
	
	CURSOR l_departments(LOC_ID LOCATIONS.LOCATION_ID%type) IS
	SELECT DEPARTMENT_NAME
	FROM DEPARTMENTS
	WHERE LOCATION_ID = LOC_ID
	ORDER BY DEPARTMENT_NAME;
BEGIN
	FOR LOC IN l_cursor LOOP
		DBMS_OUTPUT.PUT_LINE('---' || LOC.COUNTRY_ID || ', ' || LOC.CITY || '- ' || LOC.LOCATION_ID);
		FOR DEP IN l_departments(LOC.LOCATION_ID) LOOP
			DBMS_OUTPUT.PUT_LINE(CHR(9) || DEP.DEPARTMENT_NAME);
		END LOOP;
	END LOOP;
END;
/

--Exercice 2a

CREATE OR REPLACE PROCEDURE INSERT_DEPARTMENT(DEP_ID OUT NUMBER, DEP_NAME IN VARCHAR2, MAN_ID IN NUMBER, LOC_ID IN NUMBER)
IS
	last_id DEPARTMENTS.DEPARTMENT_ID%type;
BEGIN
	SELECT MAX(DEPARTMENT_ID) INTO last_id
	FROM DEPARTMENTS;

	last_id := last_id + 10;

	INSERT INTO DEPARTMENTS(DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID)
	VALUES(last_id, INITCAP(DEP_NAME), MAN_ID, LOC_ID);

	EXCEPTION
		WHEN OTHERS THEN
			IF SQLCODE = -02291 THEN
				DBMS_OUTPUT.PUT_LINE('Manager ID or department ID does not exist.');
			END IF;

END INSERT_DEPARTMENT;
/

--Exercice 2b

SET SERVEROUTPUT ON;
DECLARE
	DEP_ID DEPARTMENTS.DEPARTMENT_ID%type;
BEGIN
	INSERT_DEPARTMENT(DEP_ID, 'DATA SCIENCE', 100, 3100);
END;

--Exercise 3

CREATE OR REPLACE TRIGGER SALARY_CHECK
BEFORE INSERT OR UPDATE OF SALARY ON EMPLOYEES
FOR EACH ROW
DECLARE
	min_sal JOBS.MIN_SALARY%type;
	max_sal JOBS.MAX_SALARY%type;
BEGIN
	SELECT MIN_SALARY, MAX_SALARY INTO min_sal, max_sal
	FROM JOBS
	WHERE JOB_ID = :NEW.JOB_ID;

	IF :NEW.SALARY < min_sal OR :NEW.SALARY > max_sal THEN
		RAISE_APPLICATION_ERROR(-20001, 'The salary must be in the range of max and min.');
	END IF;
END SALARY_CHECK;
/

UPDATE EMPLOYEES SET SALARY = 20000
WHERE EMPLOYEE_ID = 174;

--Exercise 4

CREATE OR REPLACE FUNCTION GET_COUNTRY(c_id IN COUNTRIES.COUNTRY_ID%type)
RETURN VARCHAR2
IS
	country COUNTRIES.COUNTRY_NAME%type;
BEGIN
	SELECT COUNTRY_NAME INTO country
	FROM COUNTRIES
	WHERE COUNTRY_ID = c_id;
	
	RETURN country;
END GET_COUNTRY;
/

SELECT city, country_id, GET_COUNTRY(country_id)
as COUNTRY
FROM locations;